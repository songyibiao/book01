{
  "_from": "internal",
  "_id": "internal@1.0.8",
  "_inBundle": false,
  "_integrity": "sha1-pYGutVMREIdY0gslZVjY2szA19o=",
  "_location": "/internal",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "internal",
    "fetchSpec": "latest",
    "name": "internal",
    "raw": "internal",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "http://registry.npm.taobao.org/internal/download/internal-1.0.8.tgz",
  "_shasum": "a581aeb55311108758d20b256558d8daccc0d7da",
  "_spec": "internal",
  "_where": "h:\\04Website Floder\\book",
  "author": {
    "name": "Matthew Mueller"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^2.2.0",
    "object-assign": "^4.0.1",
    "sliced": "^0.0.5",
    "wrapped": "^1.0.1"
  },
  "deprecated": false,
  "description": "internal queue for your public libraries and APIs",
  "devDependencies": {
    "mocha": "^2.4.5"
  },
  "directories": {
    "test": "test"
  },
  "keywords": [
    "internal",
    "promises",
    "queue",
    "async",
    "sync",
    "generators"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "internal",
  "optionalDependencies": {},
  "readme": "# internal\n\nInternal queue for your public libraries and APIs. This library makes it easy to build asynchronous fluent APIs. You can also think of it as embedded promises.\n\nSome examples of APIs you can build using **internal**:\n\n- [nightmare](https://github.com/segmentio/nightmare)\n- [yieldb](https://github.com/pebble/yieldb)\n\n## Features\n\n- Runs asynchronous functions in order\n- Supports namespacing at any depth\n- Returns a promise for additional chaining\n- API methods can be synchronous, asynchronous, generators or promises\n- All methods are yieldable inside [co](https://github.com/tj/co)\n\n## Usage\n\n**building a simple redis client:**\n\n```js\nvar Internal = require('internal')\nvar client = require('redis')\n\n// Wrap methods in Internal\nvar internal = Internal({\n  connect: function (url) {\n    this.client = client.createClient(url)\n  },\n  get: function (key, fn) {\n    this.client.get(key, fn)\n  },\n  set: function (key, value, fn) {\n    this.client.set(key, value, fn)\n  }\n})\n\nfunction Redis () {\n  // initialization stuff\n}\n\nRedis.prototype.connect = function (url) {\n  // initialize an instance of internal, queue the\n  // connect, and return the internal object\n  return internal().connect(url)\n}\n\nvar redis = new Redis()\n\n// all async calls are queued\nredis\n  .connect('redis://localhost')\n  .set('key', 'value')\n  .get('key')\n  .then(value => console.log(value))\n```\n\nSee test for additional usage examples\n\n## Installation\n\n```\nnpm install internal\n```\n\n## License\n\nMIT, go wild.\n",
  "readmeFilename": "Readme.md",
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.8"
}
